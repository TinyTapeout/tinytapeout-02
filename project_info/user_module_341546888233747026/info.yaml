--- 
# TinyTapeout project information
project:
  wokwi_id:    341546888233747026        # If using wokwi, set this to your project's ID
#  source_files:        # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. Source files must be in ./src
#    - counter.v
#    - decoder.v
#  top_module:  "seven_segment_seconds"      # put the name of your top module here, make it unique by prepending your github username

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "cy384"      # Your name
  discord:      "cy384#9852"      # Your discord handle - make sure to include the # part as well
  title:        "Adder with 7-segment decoder"      # Project title
  description:  "Four bit adder with binary to 7 segment display decoder"      # Short description of what your project does
  how_it_works: "Four full adders with carry feeding into a somewhat hairy binary to seven segment display decoder."      # Longer description of how the project works
  how_to_test:  "Use the DIP switches to enter two four bit binary numbers.  Display of numbers greater than nine is questionable.  The decimal point of the display is carry (i.e. a sum over 16)."
  external_hw:  "No external hardware needed."      # Describe any external hardware needed
  language:     "wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required) we are expecting max clock frequency to be ~6khz. Provided on input 0.
  picture:      "screenshot.png"      # relative path to a picture in your repository
  inputs:               # a description of what the inputs do
    - first number bit 0 (least significant)
    - first number bit 1
    - first number bit 2 
    - first number bit 3
    - second number bit 0 (least significant)
    - second number bit 1
    - second number bit 2 
    - second number bit 3
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - segment DP (carry bit)

